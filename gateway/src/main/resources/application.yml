server:
  port: 8095

spring:
  application:
    name: spring-cloud-gateway-hello-world
  profiles:
    active: method_route
  redis:
    host: localhost
    port: 6379
    password: 'zhrt'
    database: 0

---
spring:
  profiles: path_route
  cloud:
    #通过配置文件配置路径拦截网关，最终的请求路径会变成uri+Path
    gateway:
      routes:
        - id: path_route
          uri: http://httpbin.org:80/
          predicates:
            - Path=/get

---
spring:
  profiles: after_route
  cloud:
    #访问时间拦截器，只有在这个时间之后的请求才拦截
    gateway:
      routes:
        - id: after_route
          uri: http://httpbin.org:80/get #这里由于是访问时间拦截器，只对时间有效,所以这个uri只有Host有效，/get路径之间被舍弃了
          predicates:
            - After=2019-10-08T14:08:00.000+08:00[Asia/Shanghai]

---
spring:
  profiles: before_route
  cloud:
    #访问时间拦截器，只有在这个时间之前的请求才拦截
    gateway:
      routes:
        - id: before_route
          uri: http://httpbin.org:80
          predicates:
            - Before=2019-10-09T14:08:00.000+08:00[Asia/Shanghai]

---
spring:
  profiles: between_route
  cloud:
    #访问时间拦截器，只有在指定时间区间的请求才拦截
    gateway:
      routes:
        - id: between_route
          uri: http://httpbin.org:80
          predicates:
            - Between=2019-10-08T14:08:00.000+08:00[Asia/Shanghai],2019-10-08T14:08:00.000+08:00[Asia/Shanghai]

---
spring:
  profiles: cookie_route
  cloud:
    #Cookie拦截器，只有Cookie包含指定字段的请求才能被拦截
    gateway:
      routes:
        - id: cookie_route
          uri: http://httpbin.org:80/get
          predicates:
            #只有Cookie里面含有name=waiter时才会被拦截
            - Cookie=name,waiter

---
spring:
  profiles: header_route
  cloud:
    #header拦截器，只有header包含指定字段的请求才能被拦截
    gateway:
      routes:
        - id: header_route
          uri: http://httpbin.org:80/get
          predicates:
            #只有Header里面含有X-Request-Id=数字时才会被拦截
            - Header=X-Request-Id,\d+

---
spring:
  profiles: host_route
  cloud:
    #Host拦截器，只指定Host的请求才能被拦截
    gateway:
      routes:
        - id: host_route
          uri: http://httpbin.org:80/get
          predicates:
            #只有Host里面含有abc.com时才会被拦截
            - Host=*.abc.com

---
spring:
  profiles: method_route
  cloud:
    #请求方法拦截器，只有指定的方法才会被拦截
    gateway:
      routes:
        - id: method_route
          uri: http://httpbin.org:80
          predicates:
            #所有的Get请求都会被拦截
            - Method=GET
          filters:
            - name: RequestRateLimiter
              args:
                key-resolver: '#{@hostAddrKeyResolver}' #用于限流的键的解析器的Bean对象的名称。它使用SpEL表达式根据#{@beanName}从Spring容器中获取Bean对象
                redis-rate-limiter.replenishRate: 10 #令牌桶填充速率，即希望用户平均每秒执行多少请求
                redis-rate-limiter.burstCapacity: 30 #令牌桶总容量

#指定fallbackcommand这个hytrix拦截器的超时时间
hystrix:
  command:
    fallbackcommand:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 0

---
spring:
  profiles: query_route
  cloud:
    #请求参数拦截器，只有包含指定请求参数的请求才能被拦截(经过测试，只能拦截在url里面的参数，表单里面的参数不能被拦截到)
    gateway:
      routes:
        - id: query_route
          uri: http://httpbin.org:80
          predicates:
            #Query接收两个参数，一个是参数名[必填]，一个是参数值[选填]，如果参数值不填，则只拦截包含指定key的请求即可，否则key和value都要匹配才能被拦截
            - Query=name,waiter
          #增加过滤器
          #gateway自带了一系列过滤器在org.springframework.cloud.gateway.filter.factory包里面
          filters:
            #给请求的头部加上一个字段X-Request-Foo=Bar
            - AddRequestHeader=X-Request-Foo,Bar
            #增加一个请求参数
            - AddRequestParameter=age,20
            #指定使用HystrixGatewayFilterFactory过滤器工厂
            - name: Hystrix
              args:
                name: fallbackcommand
                fallbackUri: forward:/fallback